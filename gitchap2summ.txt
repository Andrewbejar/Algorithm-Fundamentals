//As mentioned in the introduction of the chapter, this information 
//and commands dedicated in this chapter is of importance to get 
//started with git. 

//GETTING A GIT REPOSITORY
//You can obtain a Git repository in two ways:
	//1. You can take a local directory that is currently not 
	//under version control and turn it into a Git repository or

	//2. You can clone an existing Git repository from elswhere

//In either case, you end up with a Git repository on your local
//machine ready for work

//---Initializing a Repository in an Existing Directory---
//If you have a project directory that is currently not under
//version control and you want to start controlling it with Git, you
//first need to go to that project's directory. If you've never done
//this, it looks a little different depending on which system you're
//running.

//For Linux:
$ cd /home/user/my_project

//For macOS:
$ cd /Users/user/my_project

//For Windows:
cd C:/Users/user/my_project

//and type:$ git init

//This creates a new subdirectory named .git that contains all of
//your necessary repositry files-a Git repository files-a Git 
//repository skeleton. 

//If you want to start version-controlling existing file (as 
//opposed to an empty directory), you should probably begin tracking
//those files and do an initial commit. 
//This can be accomplished by with a few git add commands that 
//specify the files you want to track, followed by a git commit:
$ git add *.c
$ git add LICENSE 
$ git commit -, 'Initial project version'

//At this point, you have a Git repository with tracked files and an
//initial commit. 

//--Cloning an exisiting repository
//If If you would like to get a copy of an exisiting Git repository
//-for example, a project you'd like to contribute to-the command 
//you need it git clone. 

//You clone a repository with git clone <url>. For example, if you 
//want to clone the Git linkable library called libgit2, you can do 
//so like this:
$ git clone https://github.com/libgit2/libgit2

///That creates a directory named libgit2, initializes a .git 
//directory inside it, pulls down all the data for that repository,
//and checks out a working copy of the latest version. If you go
//into the new libgit2 directory that was just created, youâ€™ll see 
//the project files in there, ready to be worked on or used.

If you want to clone the repository into a directory named something
//other than  libgit2, you can specify the new directory name as an 
//additional argument:
$ git clone https://github.com/libgit2/libgit2 mylibgit

//This command does the same thing as the previous one, but the 
//target directory is called mygiblit.

Git has a number of different transfer protocols you can use. The 
//previous example uses the https:// protocol, but you may also see
//git:// or user@server:path/to/repo.git, which uses the SSH 
//transfer protocol. 

//RECORDING CHANGES TO THE REPOSITORY
//At this point, you should have a bona fide Git repository on your
//local machine, and a checkout or working copy of all of its files 
//in front of you.

//Each file in your working directory can be in one of two states:
//tracked or untracked. 

//Tracked files are files that were in the last snapshot; they can 
//modified, or staged. Basically, files that Git knows about.

//Untracked files are everything else-any files in your working
//directory that were not in your las snapshot and are not in your
//staging area.

//When you first clone a repository, all of your files will be 
//tracked and unmodified because Git just checked them out and you
//haven't editied anything.

//As you edit files, Git sees them as modified because you've 
//changed them since your last commit. As you work, you selectively
//stage these modified files and then commit all those staged changes
//and the cycle repeats. 

//--Checking the Status of Files 
//The main tool you use to determine which files are in which states
//is the git status command.
//If you run this command directly after a clone, you should see 
//something like this:
$ git status 
On branch master 
Your branch is up-yo-date with the 'origin/master'
nothing to commit, working directory clean 

//This means that you have a clean directory; in other words, none
//of your tracked files are modified. Git also doesn't see any 
//untracked files, or they would listed here. Finally the command
//tells you which branch you're one and informs you that it has not
//diverged from the same branch on the server. For now that branch is 
//always master, which is the default.

//Let say you add a new file to your project, a simple README file.
//If the file didn't exist before, and you run git status, you see
//your untracked file like so:
$ echo 'My Project' > README
$ git status 
On branch master 
Your branch is up-to-date with 'origin/master'.
Untracked files:
	(use "git add <file>---" to inclyde in what will be commited)

	README

nothing added to commit but untracked files present (use "git add" to track)

//You can see that your new REAM file is untracked, ebcause it's under
//the "Untracked files" heading in your status output. Untracked
//basically means that Git sees a file you didn't have in the 
//previous snapshot (commit). 

//--Tracking New Files 
//In order to begin tracking a new file, you use the comand git add.
//To begin tracking the README file, you can run this:
$ git add README

//If you run yout status command again, you can see that your README
//file is now tracked and staged to be commited:
$ git status
On branch master 
Your brach is up-to-date with 'origin/master'.
Changes to be commited:
	(use "git restor --staged <file>..." to unstage)

	nre file: README 

//You can tell that it's staged because it's under the "Changres to
//be commited" heading. If you commit at this point, the version of
//the file at the time you ran git add is what will be in the 
//subsequent historical snapshot. 

//--Staging Modiified Files--
//Let's change a file that was already tracked. If you change a
//previouslt tracked filed called CONTRIBUTING.md and the run 
//git status command again, you get something that look like this:
$ git status 
On branch master 
Your branch is up-to-date with 'origin/master'.
Changes to be commited:
	(use "git reset HEAD <file> 'origin/master'.
Changes to be commited:
	(use "git reset HEAD <file>..." to unstage)

	new file: README

Changes not staged for commit: 
	(use "git add <file>..." to update what will be commited)
	(use "git checkout -- <file>..." to discard changes in working directory)

	modified:	contributing.md 

//The CONTRIBUTING.md file appears under a section named "Changes not
//staged for commit"-which means tha a file that is trackedhas been 
//modified in the working diretory but no yet staged. To stage it, you
//run the git add command. git add is a multipurpose command-you use
//it to begin tracking new files, to stage fukes, and to do other 
//things like marking merge-conflicted files as resolved.

//Let's run git add now to stage the CONTRIBUTING.md file, and then
//run git status again:
$ git add CONTRIBUTING.md  
$ git status 
On breanc master
Yout branch is up-to-date with 'origin/master'.
Changes to be commited 
	(use "git reset HEAD <file>..." to unstage)

	new file:	README
	modified:	Contributing

//Both files are staged and will go into your next commit. 
//Suppose you remeber one little change that you want to make in 
//CONTRIBUTING.md before you commit it. You open it again and make 
//that change, and you're ready to commit. 
//However, let's run git status one more time:
$ vim CONTRIBUTING.md
$ git status 
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be commited:
	(use "git reset HEAD <file>..." to unstage)

	new file:	README
	modified:	CONTRIBUTING.md 

Changes not staged for commit:
	(use add <file>..." to update that will be commited)
	(use "git checkout -- >file>..." to discard changes in working directory)

	modified:	CONTRIBUTING.md

//Now CONTRIBUTING.md is listed as both staged and unstaged. How is 
//that possible? It turns out that Git stages a file exactly as it is
//when you last tan the git add command is how it will go into the
//commit
$ git add CONTRIBUTING.md
$ git status 
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be commiiied:
	(use "git reset HEAD <file>..." to unstage)

	new file:	README
	modified:	CONTRIBUTING.md

//--Short Status--
//While the git status output is pretty comprehensive, it's also quite
//wordy. Git also has a short status flag so you can see your changes
//in a more compact way. If you run git status -s or git status 
//--short you get a far more simplified output from the command:
$ git status -s 
 M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENCE.txt

//New files that aren't tracked have a ?? next to them, new files have
//been added to the staging area have an A, modified files have an M
//and so on.
//There are two columns to the output-the left-hand column indicates
//the status of the staging area and the right-hand column indicates
//the status of the working tree. So for example in that output, the 
//README file is modified in the workign directory but not yet staged,
while the lib/simplegit.rb file is modified and staged. The Rakefile
//was modified, staged and then modified again, so there are changes
//to it that are both staged and unstaged.


//--Ignoring Files--
$ cat .gitignore
*.[oa]
*~

//The first line tells Git to ignore any files enfing in ".o" or ".a"
//-object and archives files that may be the product of building your
//code. The second like tells Git t ignore all files whose names end 
//with a tilde (~), which is used byb many text editors such as Emacs 
//to mark temporary files.
//Setting up a .gitignore file for your new repository before you get
//going is generally a good idea so you don't accidentally commit 
//files you really don't want in your Git repository.

//The rules for the patterns tou can put in the .gitignore file are
//as follows:

//Blank lined or lines starting eith # are ignored
//Standard glob patters workm and will be applied recursively 
//throughout the entire work tree. 
//You can start patterns with a forward slash (/) to avoid recursivity
//You can end patterns with a forward slash (/) to specify a directory
//You can negate a pattern by starting it with an exclamation point (!)

//Glob patterns are like simplified regular expressions that shells
//use. An asterisk (*) matches zero or more charachter; [abc] matches
//any character inside the brackets (in this case a, b, c); a
//question mark (?) matches a single character; and brackets enclosing
//characters seperated by a hyphen ([0-9]) matches any character 
//between the, (in this case 0 through 9). You can aslo two asterisks
//to match nested directories; a/**/z would match a/z, a/b/z, a/b/c/z,
//and so on.

//Here is another example example .gitignore file:

# ingnore all .a files 
*.a

# but do track lib.a, even though you're ignoring .a files above
!lib.a

# only ignore the TODO file in the current directory, not subdir/TODO
/TODO

# ignore doc/notes.txt, but not doc/server/arch.txt
doc/*.txt

# ignore all .pdf files in the doc/ directory and any of its subirectoires 
doc/**/*.pdf

//--Viewing Your Staged and Unstaged Changes--
//If the git status command is too vague for you-you want to know 
//exactly what you changed-you use the git diff command. 
//Probably will be used to answer these two questions: 
//What have you changed but not yet staged? and 
//What have you staged that you are about to commit?
//Although git status answers those question very generally by 
//listing the file names, git diff shows you the exacr lines added and
//removed-the patch, as it were. 


//Let's sat you edit and stage the README file again and then edit
//the CONTIBUTING.md file without staging it. Ig you run git status 
//comman, you once again see something like this:
$ git status 
On branch master 
Your branch is up-to-date with 'origin/master'
Changes to be committed: 
	(use "git reset HEAD <file>..." to unstage)

	modified:	README

Changes not staged for commit:
	(use "git add <file>..." to update what will be commited)
	(use "git checkout -- <file>..." to discard changes in working directory)

	modified:	CONTRIBUTING.md

//To see what you've changed but not yet staged, type git diff with
//no arguments:
$ git diff 
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65.7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of yout changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in. 
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines. 

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's

//That commane compares what is in your working directory with what
//is in your staging area. The result tells you the changes you've
//made that you haven't yet staged.

//If you want to see what you'ce staged that will go into your next 
//commit, you can use git diff --staged. This command compares your
//staged changes to your last commit:
$ git diff --staged 
diff --git a/README
new file mode 100644
index 0000000..03902a1
--- /dev/null
+++ b/README
@@ -0,0 +1 @@
+My Project

//It's important to note that git diff by itself doesn't show all
//changes made since your last commit-only changes that are still 
//unstaged. If you've staged all of your changes, git diff will give 
//you no output.

//For example, if you stage the CONTRIBUTING.md file and then edit it,
//you can use git diff to see the changes in the file that are staged
//and the changes that are unstaged.
If our environment looks like this:
$ git add CONTRIBUTING.md 
$ echo '#test line' >> CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'
Changes to be committed:
	(use "git reset HEAD <file>..." to unstage)

	modified:	CONTRIBUTING.md

Changes not staged for commit:
	(use "git add <file>...." to update what will be committed)
	(use "git checkout -- <file>..." to discard changes in working directory)

	modified:	CONTRIBUTING.md

//Now use git diff to see what is still unstaged:
$git diff
diff --git a/CONTRIBUTING.md
n/CONTRIBUTING.md
index 643e24f..87f08c8 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -119,3 +110,4 at the 
 ## Starter Projects

See our [projects list](https://github.com/libgit2/libgit2/blob/development/PROJECTS.md).
+# test line

//and git diff -cahced to see what you've staged so far (--staged and
//--cahched are synonyms)
$ git diff --cahced
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in
+merged in. Also split your changes into comprehensice chunks if your patch is
+longer than a dozen lines. 

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's

//--Commiting Changes--
//Now that your staging area is set up the way you want it, you can 
//change your commits. Remember that anything that is still unstaged
//-any files you have created or modified that you haven't run git add
//on since you edited them-won't go into this commit. They will stay
//as modified files on your disk. In this  case, let's say that the
//las time you ran git status, you saw that everything was staged, so
//you're ready to commit your changes. The simplest way to commit is
//to type git commit:
$ git commit

//doing so launches your editor of choice.

//The editor display the following text (this example is a Vim 
//screen):
# Please enter the commit message for your changes. Lines starting
# with '#' wille be ingored, and an empty message aborts the commit.
# On branch master
# Your branch is up-to-date with 'origin/master'.
#
# Changes to be committed 
#	new file:	README
#	modified:	CONTRIBUTING.md
#
~
~
~
".git/COMMIT_EDITMSG" 9L, 283C

//You can see that the default commit message contains the latest 
//output of the  git status comman commented out and one empty line
//on top.

//Alternatively, you can type your commit message inline with the 
//commit command by specifying it after a .m flag, like this:
$ git commit -m "Story 182:fix benchmarks for speed"
[master 463dc4f] Story 182: fix benchmarks for speed 
 2 files changed, 2 insertions(+)
 create mode 100644 README

//Now you've created your first commit! You can see that the commit
//has  given you some output about itself: which branch you committed
//to (master), what SHA-a checksum the commit has (463dc4f), how many
//files we changed, and statistics about lines added and removed in 
//the commit.

//Remeber that the commit record the snapshot you set up in your 
//staging area. Anything you didn't stage is still sitting there 
//modified; you can do another commit to add it to your history. 
//Every time you perform a  commit, you're recording a snapshot of 
//your project that you can revert to or compare to later.

//--Skipping the Staging Area--
//Although it can be amazingly useful for crafting commits exactly how
//you want them, the staging area is sometimes a bit more complex than
//you need in your workflow. 

//If you want to skip the staging area, Git provides a simple shorcut
//Adding the -a option to the git commit command make Git 
//automatically stage every file that is already tracked before doing
//the commit, letting you skip the git add part:
$ git status 
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

no changes added to commit (use "git add" and/or "git commit -a")
$ git commit -a -m 'Add new benchmarks'
[master 83e38c7] Add new benchmarks
 1 file changed, 5 insertions(+), 0 deletions(-)

//Notice how you donâ€™t have to run git add on the CONTRIBUTING.md
// file in this case before you commit. Thatâ€™s because the -a flag 
//includes all changed files. This is convenient, but be careful;
// sometimes this flag will cause you to include unwanted changes.

//--Removing Files--
//To remove a file from Git, you have to remove it from your 
//tracked files (more accurately, removing from your staging area)
//The git rm command does that, and also removes the file from your
//working directory so you don't see it as an untracked file the 
//next time around.
$ rm PROJECTS.md
$ git status 
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        deleted:    PROJECTS.md

no changes added to commit (use "git add" and/or "git commit -a")

//Then, if you run git rm, it stages the file's removal:
$ git rm PROJECTS.md
rm 'PROJECTS.md'
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    deleted:    PROJECTS.md

//The next time you commit, the fil will be gon and no longer tracked.
//If you modified the file or had already added it to the staging area
//you must force the removal with the -f option. This is a safety 
//feature to prevent accidental remocal of data that hasn't yet been
//recorded in a snapshot and that can't be recovered from Git. 

//Another thing you may want to do is to keep the file in your working
//tree but remove it from your staging area. In other words, you may
//want to keep the file on your hard drive but not have Git track it 
//anymore.
//This is especially useful ig you forgot to add something to your
//.gitignore file and accidentally staged it, like a large file or a 
//bunch og .a compiled files. To do thism use the --cached option:
$ git rm --cached README

//You can pass files, directories, and file-glob patterns to the
//git rm command. Than means you can do things such as:
$ git rm log/\*.log

//Note the backslacsh (\) in front of the *. This is necessary because
//Git does its own filename expansion in addition to your shell's
//filename expansion. This command removes all files that ahve .log
//extension in the log\/ directory. Or, you can do something like 
//this:
$ git rm \*~

//This command removes all files whose names end with a ~


